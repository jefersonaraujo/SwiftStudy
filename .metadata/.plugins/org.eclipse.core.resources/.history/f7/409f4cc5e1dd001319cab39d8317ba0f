package br.edu.fa7.droidradar.activity;

import java.util.List;

import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;

import android.app.Activity;
import android.content.Context;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import br.edu.fa7.droidradar.R;
import br.edu.fa7.droidradar.dao.PlacemarkDAO;
import br.edu.fa7.droidradar.model.DrawableEnum;
import br.edu.fa7.droidradar.model.Placemark;

public class MainActivity extends Activity {

	private GoogleMap map;
	private LocationManager manager;
	private List<Placemark> markers;
	private PlacemarkDAO markerDao;

	private LocationListener locationListener = new LocationListener() {

		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onProviderEnabled(String provider) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onProviderDisabled(String provider) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onLocationChanged(Location location) {
			updateMyPosition(location);
			
			Log.i("Pos", String.valueOf(markers.size()));
			
			for (Placemark marker : markers) {
				Log.i("Pos", marker.getLatitude() +" " + marker.getLongitude() );
				updateMarker(new LatLng(marker.getLatitude(), marker.getLongitude()));
				
			}
			

		}

		private void updateMyPosition(Location location) {
			LatLng position = new LatLng(location.getLatitude(),
					location.getLongitude());
			CameraPosition cameraPosition = CameraPosition.builder()
					.target(position).bearing(0).tilt(0).zoom(10).build();
			CameraUpdate update = CameraUpdateFactory
					.newCameraPosition(cameraPosition);
			map.animateCamera(update);

		}

		private void updateMarker(Location location) {
			double lat = location.getLatitude() + 0.5;
			double lon = location.getLongitude() + 0.5;

			MarkerOptions markerOptions = new MarkerOptions();
			markerOptions.position(new LatLng(lat, lon));
			markerOptions.title("Marcador de teste");

			map.clear();
			map.addMarker(markerOptions);

		}
		
		private void updateMarker(LatLng latLng) {

			MarkerOptions markerOptions = new MarkerOptions();
			markerOptions.position(latLng);
			markerOptions.title("Marcador de teste");

			map.clear();
			map.addMarker(markerOptions);

		}
	};
	
	private void updateMarker(LatLng latLng) {

		MarkerOptions markerOptions = new MarkerOptions();
		markerOptions.position(latLng);
		markerOptions.title("Marcador de teste");

		map.clear();
		map.addMarker(markerOptions);

	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);

		map = ((MapFragment) getFragmentManager().findFragmentById(
				R.id.main_map)).getMap();
		map.setMyLocationEnabled(true);
		manager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		markerDao = new PlacemarkDAO(this);
		
		
		markers = markerDao.getAll();
		
		for (Placemark marker : markers) {
			Log.i("Pos", marker.getLatitude() +" " + marker.getLongitude() );
			updateMarker(new LatLng(marker.getLatitude(), marker.getLongitude()));
			
		}

	}

	@Override
	protected void onResume() {
		super.onResume();
		manager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0,
				locationListener);
	}

	@Override
	protected void onPause() {
		super.onPause();
		manager.removeUpdates(locationListener);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {

		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	private double getDistanceBetween(double lat1, double lon1, double lat2,
			double lon2) {

		double radLat1 = lat1 * Math.PI / 180;
		double radLon1 = lon1 * Math.PI / 180;
		double radLat2 = lat2 * Math.PI / 180;
		double radLon2 = lon2 * Math.PI / 180;

		double deltaLat = radLat2 - radLat1;
		double deltaLon = radLon2 - radLon1;

		double a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2)
				+ Math.cos(radLat1) * Math.cos(radLat2)
				* Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);

		double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

		return Math.round(6371.0 * c * 1000.0);

	}

	private int getDrawableImage(String type) {
		int result = R.drawable.ic_launcher;

		if (DrawableEnum.fixo30.name().equals(type)) {
			result = R.drawable.fixo30;

		} else if (DrawableEnum.fixo40.name().equals(type)) {
			result = R.drawable.fixo40;

		} else if (DrawableEnum.fixo50.name().equals(type)) {
			result = R.drawable.fixo50;

		} else if (DrawableEnum.fixo60.name().equals(type)) {
			result = R.drawable.fixo60;

		} else if (DrawableEnum.fixo70.name().equals(type)) {
			result = R.drawable.fixo70;

		} else if (DrawableEnum.fixo80.name().equals(type)) {
			result = R.drawable.fixo80;

		} else if (DrawableEnum.fixo90.name().equals(type)) {
			result = R.drawable.fixo90;

		} else if (DrawableEnum.fixo100.name().equals(type)) {
			result = R.drawable.fixo100;

		} else if (DrawableEnum.fixo110.name().equals(type)) {
			result = R.drawable.fixo110;

		} else if (DrawableEnum.fixo120.name().equals(type)) {
			result = R.drawable.fixo120;

		} else if (DrawableEnum.movel30.name().equals(type)) {
			result = R.drawable.movel30;

		} else if (DrawableEnum.movel40.name().equals(type)) {
			result = R.drawable.movel40;

		} else if (DrawableEnum.movel50.name().equals(type)) {
			result = R.drawable.movel50;

		} else if (DrawableEnum.movel60.name().equals(type)) {
			result = R.drawable.movel60;

		} else if (DrawableEnum.movel70.name().equals(type)) {
			result = R.drawable.movel70;

		} else if (DrawableEnum.movel80.name().equals(type)) {
			result = R.drawable.movel80;

		} else if (DrawableEnum.movel90.name().equals(type)) {
			result = R.drawable.movel90;

		} else if (DrawableEnum.movel100.name().equals(type)) {
			result = R.drawable.movel100;

		} else if (DrawableEnum.movel110.name().equals(type)) {
			result = R.drawable.movel110;

		} else if (DrawableEnum.movel120.name().equals(type)) {
			result = R.drawable.movel120;

		} else if (DrawableEnum.lombada.name().equals(type)) {
			result = R.drawable.lombada;

		} else if (DrawableEnum.pedagio.name().equals(type)) {
			result = R.drawable.pedagio;

		} else if (DrawableEnum.perigo.name().equals(type)) {
			result = R.drawable.perigo;

		} else if (DrawableEnum.prf.name().equals(type)) {
			result = R.drawable.prf;

		} else if (DrawableEnum.semaforo.name().equals(type)) {
			result = R.drawable.semaforo;

		} else if (DrawableEnum.semaforo30.name().equals(type)) {
			result = R.drawable.semaforo30;

		} else if (DrawableEnum.semaforo40.name().equals(type)) {
			result = R.drawable.semaforo40;

		} else if (DrawableEnum.semaforo50.name().equals(type)) {
			result = R.drawable.semaforo50;

		} else if (DrawableEnum.semaforo60.name().equals(type)) {
			result = R.drawable.semaforo60;

		} else if (DrawableEnum.semaforo70.name().equals(type)) {
			result = R.drawable.semaforo70;

		} else if (DrawableEnum.semaforo80.name().equals(type)) {
			result = R.drawable.semaforo80;
		}

		return result;
	}

}
